#!/bin/sh

# Welcome to the Agendrix laptop script, based on thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

show_help() {
  echo "Setup your development machine"
  echo "options:"
  echo "--help                              Show brief help."
  echo "--skip-homebrew-update              Skip Homebrew formulaes and casks update."
  exit 0;
}

while test $# -gt 0; do
  case "$1" in
    (-h|--help)
        show_help;;
    (--skip-homebrew-update)
        SKIP_HOMEBREW_UPDATE="true"
        shift;;
    (--ruby-version)
        RUBY_VERSION="$2"
        shift
        shift;;
    *)
      show_help;;
  esac
done

#
# Functions
#

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

safe_append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

brew_package_exists() {
  brew list "${1}" > /dev/null;
}

activate_exit_on_error() {
  set -e
}

deactivate_exit_on_error() {
  set +e
}

install_homebrew() {
  fancy_echo "Installing Homebrew ..."
  curl -fsS \
    'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

  HOMEBREW_PREFIX=$(brew --prefix)
  safe_append_to_zshrc '# recommended by brew doctor'
  safe_append_to_zshrc 'export PATH="$HOMEBREW_PREFIX/bin:$PATH"' 1
  export PATH="$HOMEBREW_PREFIX/bin:$PATH"
}

set_homebrew_owner() {
  fancy_echo "Seting Homebrew dependencies owner ..."
  HOMEBREW_PREFIX=$(brew --prefix)
  
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"

  # /usr/local/opt was the pre-m1 homebrew opt directory
  #  some libs depend on it existing
  OPT_SYM_LINK=/usr/local/opt
  if ! [ -d $OPT_SYM_LINK ]; then
    sudo ln -s "$HOMEBREW_PREFIX/opt" $OPT_SYM_LINK
    sudo chown -R "$LOGNAME:admin" $OPT_SYM_LINK
  fi
}

#
# Main
#

activate_exit_on_error

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

safe_append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if ! command -v brew >/dev/null; then
  install_homebrew
fi

set_homebrew_owner

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

if [ ! $SKIP_HOMEBREW_UPDATE ]; then
  fancy_echo "Updating Homebrew formulae ..."
  brew update --quiet --force # https://github.com/Homebrew/brew/issues/1151

  deactivate_exit_on_error

  brew bundle --quiet --file=- <<EOF
    tap "homebrew/services"

    # Unix
    brew "git"
    brew "openssl@1.1"
    brew "the_silver_searcher"
    brew "vim"
    brew "zsh"

    # Programming languages and package managers
    brew "libyaml" # should come after openssl
    brew "node@14"
    brew "yarn"
    brew "git-crypt"
    brew "gnupg"

    # Casks
    cask "google-chrome"
    cask "visual-studio-code"
    cask "slack"
    cask "discord"
    cask "iterm2"
    cask "figma"
EOF
  activate_exit_on_error
fi

if brew_package_exists "node@14"; then
  fancy_echo "Configuring Node..."
  brew unlink node@14
  brew link --overwrite node@14
fi

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  . "$HOME/.laptop.local"
fi

fancy_echo "Script completed. You might need to restart your computer."
